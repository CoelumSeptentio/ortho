version: "3.9"

services:
  cms:
    image: node:18
    working_dir: /app
    volumes: [ "./cms:/app" ]
    env_file: [ ".env", "./cms/.env" ]
    extra_hosts: [ "host.docker.internal:host-gateway" ]
    command: sh -c "npm ci || npm install; npm run develop"

  meili:
    image: getmeili/meilisearch:v1.10
    env_file: [ "./meili/.env" ]
    volumes: [ "meili:/meili_data" ]

  frontend:
    image: node:20
    working_dir: /app
    volumes: [ "./frontend:/app" ]
    env_file: [ ".env", "./frontend/.env" ]
    environment:
      HOST: "0.0.0.0"
      PORT: "3000"
      NITRO_HOST: "0.0.0.0"
      NITRO_PORT: "3000"
      NODE_OPTIONS: "--max-old-space-size=1024"
      CHOKIDAR_USEPOLLING: "1"         # <-- dev režimui
      VITE_FS_EVENTS_POLLING: "1"      # <-- dev režimui
    # (nebūtina) – papildomi limitai konteineryje
#    sysctls:
#      - fs.inotify.max_user_watches=1048576
#      - fs.inotify.max_user_instances=2048
#    command: sh -lc "npx --yes pnpm@9 dev --host 0.0.0.0 --port 3000"
    command: >
          sh -lc '
            node -e "p=require(\"./package.json\"); process.exit(p.scripts&&p.scripts.dev?0:1)" \
              && exec npx --yes pnpm@9 dev --host 0.0.0.0 --port 3000 \
              || exec npx --yes nuxi dev --host 0.0.0.0 --port 3000
          '
    depends_on: [ cms, meili ]
    healthcheck:
#      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
#      test:  ["CMD-SHELL", "curl -fsS http://localhost:3000/ >/dev/null || exit 1"]
      test:  ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3000/', r=>process.exit(r.statusCode<500?0:1)).on('error',()=>process.exit(1))"]
      interval: 2s
      timeout: 2s
      retries: 120
      start_period: 90s

  proxy:
    image: nginx:1.27
    # proxy startuos tik kai frontend bus healthy
    depends_on:
      frontend:
        condition: service_healthy
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./reverse-proxy/10-wait-for-frontend.sh:/docker-entrypoint.d/10-wait-for-frontend.sh:ro
    environment:
      WAIT_URL: http://frontend:3000/
      WAIT_RETRIES: "300"     # (nebūtina) kiek kartų bandyti
      WAIT_INTERVAL: "2"      # (nebūtina) sekundės tarp bandymų
    ports: [ "8080:80" ]

volumes:
  meili:
